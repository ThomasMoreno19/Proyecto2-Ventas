generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model proyecto_2 {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  @@map("proyecto-2")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean   @default(false)
  role          Role      @default(USER)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Marca {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nombre      String
  descripcion String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  marcaXLineas MarcaXLinea[]
}

model Linea {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nombre      String
  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  marcaXLineas MarcaXLinea[]
}

model MarcaXLinea {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  marcaId   String     @db.ObjectId
  lineaId   String     @db.ObjectId

  marca     Marca      @relation(fields: [marcaId], references: [id])
  linea     Linea      @relation(fields: [lineaId], references: [id])

  productos Product[]  

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float
  stock         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  marcaXLineaId String?       @db.ObjectId
  marcaXLinea   MarcaXLinea?  @relation(fields: [marcaXLineaId], references: [id])
}